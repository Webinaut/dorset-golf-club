---
interface Tab {
  id: string;
  label: string;
  content: string;
}

interface Props {
  tabs: Tab[];
  defaultTab?: string;
}

const { tabs, defaultTab = tabs[0]?.id } = Astro.props;
---

<div class="tabs-container" data-default-tab={defaultTab}>
  <div class="tabs-nav" role="tablist">
    {
      tabs.map((tab, index) => (
        <button
          class="tab-button"
          role="tab"
          id={`tab-${tab.id}`}
          aria-controls={`panel-${tab.id}`}
          aria-selected={tab.id === defaultTab ? "true" : "false"}
          tabindex={tab.id === defaultTab ? "0" : "-1"}
          data-tab={tab.id}
        >
          {tab.label}
        </button>
      ))
    }
  </div>

  <div class="tabs-content">
    {
      tabs.map((tab) => (
        <div
          class="tab-panel"
          role="tabpanel"
          id={`panel-${tab.id}`}
          aria-labelledby={`tab-${tab.id}`}
          data-panel={tab.id}
          hidden={tab.id !== defaultTab}
          tabindex="0"
        >
          <div set:html={tab.content} />
        </div>
      ))
    }
  </div>
</div>

<style lang="scss">
  // .tabs-container {
  //   margin: 1rem 0;
  // }

  .tabs-nav {
    display: flex;
    gap: 0;
    margin-bottom: 0;
    /* border-bottom: 2px solid var(--pico-border-color); */
    overflow-x: auto;
    scrollbar-width: thin;
  }

  .tab-button {
    background: none;
    border: none;
    border-radius: 0;
    padding: 0;
    margin: 1em;
    cursor: pointer;
    font-size: 1.2rem;
    font-weight: 500;
    color: var(--pico-primary);
    border-bottom: 3px solid transparent;
    transition: all 0.2s ease;
    white-space: nowrap;
    position: relative;
    &:first-of-type {
      margin-left: 0;
    }
  }

  .tab-button:hover {
    /* background-color: var(--pico-secondary-background); */
    color: var(--pico-primary-hover);
    border-color: var(--pico-primary-hover);
    box-shadow: none;
  }

  .tab-button[aria-selected="true"] {
    color: var(--pico-primary-focus);
    border-color: var(--pico-primary-focus);
    /* border-bottom-color: var(--pico-primary);
    background-color: var(--pico-primary-background); */
  }

  .tab-button:focus {
    /* outline: 2px solid var(--pico-primary);
    outline-offset: -2px; */
    box-shadow: none;
  }

  .tabs-content {
    /* padding: 2rem 0; */
    /* position: relative; */
  }

  // .tab-panel {
  //   opacity: 1;
  //   transition: opacity 0.3s ease;
  // }

  // .tab-panel[hidden] {
  //   display: none;
  // }

  // .tab-panel:focus {
  //   outline: none;
  // }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .tabs-nav {
      flex-wrap: wrap;
    }

    .tab-button {
      flex: 1;
      // min-width: 120px;
      // padding: 0.75rem 1rem;
    }
  }

  /* Custom scrollbar for tab navigation */
  .tabs-nav::-webkit-scrollbar {
    height: 4px;
  }

  .tabs-nav::-webkit-scrollbar-track {
    background: var(--pico-background-color);
  }

  .tabs-nav::-webkit-scrollbar-thumb {
    background: var(--pico-border-color);
    border-radius: 2px;
  }

  .tabs-nav::-webkit-scrollbar-thumb:hover {
    background: var(--pico-primary);
  }
</style>

<script>
  class TabsComponent {
    [x: string]: any;
    constructor(container: any) {
      this.container = container;
      this.tabButtons = container.querySelectorAll(".tab-button");
      this.tabPanels = container.querySelectorAll(".tab-panel");
      this.init();
    }

    init() {
      // Add click listeners
      this.tabButtons.forEach(
        (button: {
          addEventListener: (arg0: string, arg1: (e: any) => void) => void;
        }) => {
          button.addEventListener(
            "click",
            (e: { target: { dataset: { tab: any } } }) => {
              this.activateTab(e.target.dataset.tab);
            }
          );
        }
      );

      // Add keyboard navigation
      this.container.addEventListener("keydown", (e: any) => {
        this.handleKeydown(e);
      });
    }

    activateTab(tabId: any) {
      // Update tab buttons
      this.tabButtons.forEach(
        (button: {
          dataset: { tab: any };
          setAttribute: (arg0: string, arg1: string | boolean) => void;
        }) => {
          const isActive = button.dataset.tab === tabId;
          button.setAttribute("aria-selected", isActive);
          button.setAttribute("tabindex", isActive ? "0" : "-1");
        }
      );

      // Update tab panels
      this.tabPanels.forEach(
        (panel: {
          dataset: { panel: any };
          hidden: boolean;
          style: { opacity: string };
        }) => {
          const isActive = panel.dataset.panel === tabId;
          panel.hidden = !isActive;

          if (isActive) {
            // Smooth fade-in effect
            panel.style.opacity = "0";
            setTimeout(() => {
              panel.style.opacity = "1";
            }, 10);
          }
        }
      );
    }

    handleKeydown(e: { key: any; preventDefault: () => void }) {
      const focusedElement = document.activeElement;

      if (!focusedElement.classList.contains("tab-button")) return;

      const currentIndex = Array.from(this.tabButtons).indexOf(focusedElement);
      let newIndex;

      switch (e.key) {
        case "ArrowLeft":
          e.preventDefault();
          newIndex =
            currentIndex > 0 ? currentIndex - 1 : this.tabButtons.length - 1;
          break;
        case "ArrowRight":
          e.preventDefault();
          newIndex =
            currentIndex < this.tabButtons.length - 1 ? currentIndex + 1 : 0;
          break;
        case "Home":
          e.preventDefault();
          newIndex = 0;
          break;
        case "End":
          e.preventDefault();
          newIndex = this.tabButtons.length - 1;
          break;
        case "Enter":
        case " ":
          e.preventDefault();
          // this.activateTab(focusedElement.data.tab);
          this.activateTab((focusedElement as HTMLElement).dataset.tab);
          return;
        default:
          return;
      }

      if (newIndex !== undefined) {
        this.tabButtons[newIndex].focus();
        this.activateTab(this.tabButtons[newIndex].dataset.tab);
      }
    }
  }

  // Initialize all tab components on the page
  document.addEventListener("DOMContentLoaded", () => {
    const tabContainers = document.querySelectorAll(".tabs-container");
    tabContainers.forEach((container) => {
      new TabsComponent(container);
    });
  });
</script>
